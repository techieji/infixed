__doc__, __version__, make_infix = 'Provides `make_infix` to create custom infix operators and multiple premade infix operators.', '1.1.0', lambda op: type(f'{op.title()}Infix', (), {'TYPE': op, '__new__': lambda cls, fn, args=[]: fn(*args) if len(args) > 1 else object.__new__(cls), '__init__': lambda self, fn, args=[]: [setattr(self, 'fn', fn), setattr(self, 'args', args)][0], f'__r{op}__': (w := lambda self, other: type(self)(self.fn, self.args + [other])), f'__{op}__': w, '__call__': lambda self, *args: self.fn(*args)})
for x, y in list(map(lambda x: (x + '_infix', x), ['add', 'sub', 'mul', 'pow', 'or', 'and'])) + [('div_infix', 'truediv'), ('infix', 'or')]: globals()[x] = make_infix(y)
